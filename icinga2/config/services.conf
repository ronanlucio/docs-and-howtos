// Check System Load
apply Service "System Load" {
  check_command = "load"
  
  vars.slack_notifications = "enabled"

  command_endpoint = host.vars.agent_endpoint // Check executed on client node
  assign where host.vars.agent_endpoint
}

// Check number of running system Processes
apply Service "Process" {
  check_command = "procs"
  command_endpoint = host.vars.agent_endpoint
  assign where host.vars.agent_endpoint
}

// Time offset Check 
apply Service "Time offset" {
  check_command = "ntp_time"

  vars.ntp_address = "pool.ntp.org"
  vars.ntp_warning = "5"
  vars.ntp_critical = "60"
  command_endpoint = host.vars.agent_endpoint

  assign where host.vars.agent_endpoint && host.vars.os == "Linux"
}

// Check number of Logged in Users
apply Service "Users" {
  check_command = "users"
  command_endpoint = host.vars.agent_endpoint
  assign where host.vars.agent_endpoint
}

// Check System Disk Usage
apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config
  vars.slack_notifications = "enabled"

  command_endpoint = host.vars.agent_endpoint
  assign where host.vars.agent_endpoint
}

// Check for SWAP memory Usage
apply Service swap {
  import "generic-service"

  check_command = "swap"

  command_endpoint = host.vars.agent_endpoint

  assign where host.vars.agent_endpoint && hosts.vars.os == "Linux"
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"
  check_command = "http"

  vars += config
  vars.slack_notifications = "enabled"
}

// Certificate Expiration Check
apply Service for (ssl_vhost => config in host.vars.ssl_vhosts) {
  import "generic-service"
  check_command = "ssl"

  vars += config
  vars.slack_notifications = "enabled"
}

// Domain Expiration Check
apply Service "Domain Expiration" {
  check_command = "check_domain_expiration"

  vars.slack_notifications = "enabled"

  assign where host.vars.domain_check
}

// SSH Service Check
apply Service "SSH Service" {
  check_command = "ssh"
  command_endpoint = host.vars.agent_endpoint
  assign where host.vars.agent_endpoint

}

apply Service "Ping" {
  check_command = "ping4"
  assign where host.address
}

// APT Check
apply Service "apt" {
  import "generic-service"
  check_command = "apt"

  vars.apt_only_critical = "true"

  assign where host.vars.os == "Linux" && host.vars.distribution == "Ubuntu"
}

// Agent health-check
apply Service "agent-health" {
  check_command = "cluster-zone"

  display_name = "cluster-health-" + host.name

  /* This follows the convention that the agent zone name is the FQDN which is the same as the host object name. */
  vars.cluster_zone = host.name

  assign where host.vars.agent_endpoint
}